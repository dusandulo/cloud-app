@model IEnumerable<RedditService_Data.Topic>
@{
    ViewBag.Title = "Index";
    var authCookie = Request.Cookies[System.Web.Security.FormsAuthentication.FormsCookieName];
    string userName = null;
    if (authCookie != null)
    {
        var authTicket = System.Web.Security.FormsAuthentication.Decrypt(authCookie.Value);
        userName = authTicket?.Name;
    }
}

<h2>Reddit</h2>

@{var _repository = new RedditService_Data.RedditDataRepository(); }

@if (!string.IsNullOrEmpty(userName))
{
    <p>Welcome, @userName!</p>
    <p>@Html.ActionLink("Logout", "Logout", "Login")</p>
}
else
{
    <p>@Html.ActionLink("Login", "ShowLogin", "Login")</p>
}
@if (!string.IsNullOrEmpty(userName))
{
    <p>@Html.ActionLink("Create New", "Create")</p>
    <p>@Html.ActionLink("Edit User", "ShowEdit", "EditProfile")</p>
}
<p>@Html.ActionLink("Register User", "ShowRegister", "Register")</p>
<p>@Html.ActionLink("View Users", "ShowListUsers", "Register")</p>

<form method="get" action="@Url.Action("Index")">
    <input type="text" name="searchString" value="@ViewBag.CurrentFilter" placeholder="Search by title..." />
    <button type="submit">Search</button>
</form>

<button onclick="location.href='@Url.Action("Index", new { sortOrder = "asc", searchString = ViewBag.CurrentFilter })'">Sort Asc</button>
<button onclick="location.href='@Url.Action("Index", new { sortOrder = "desc", searchString = ViewBag.CurrentFilter })'">Sort Desc</button>

<table>
    @foreach (var item in Model)
    {
        <tr>
            <td>
                @if (!string.IsNullOrEmpty(item.ImageUrl))
                {
                    <img src="@item.ImageUrl" alt="Image" />
                }
                else
                {
                    <span>No Image</span>
                }
            </td>
            <td>
                <strong>@Html.DisplayFor(modelItem => item.Title)</strong>
                <p>@Html.DisplayFor(modelItem => item.Content)</p>
                <p>@Html.DisplayFor(modelItem => item.UserId)</p>
                <p><em>@Html.DisplayFor(modelItem => item.RowKey)</em></p>
            </td>
            <td class="vote-buttons">
                <p>Upvotes: @item.Upvotes</p>
                <p>Downvotes: @item.Downvotes</p>
                @{
                    bool hasVoted = false;
                    if (userName != null)
                    {
                        var user = _repository.GetUserByEmail(userName);
                        hasVoted = _repository.HasUserVoted(user.RowKey, item.RowKey);
                    }
                }

                @{ if (!hasVoted)
                    {
                        <form action="@Url.Action("Upvote", "Topics")" method="post">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="id" value="@item.RowKey" />
                            <button type="submit" @(hasVoted ? "disabled" : "")>Upvote</button>
                        </form>
                    }
                    else
                    {
                        <p>Upvoted</p>
                    }
                }


                @{ if (!hasVoted)
                    {
                        <form action="@Url.Action("Downvote", "Topics")" method="post">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="id" value="@item.RowKey" />
                            <button type="submit" @(hasVoted ? "disabled" : "")>Downvote</button>
                        </form>
                    }
                    else
                    {
                        <p>Downvoted</p>
                    }
                }

            </td>
            <td>
                @if (item.UserId == userName)
                {
                    using (Html.BeginForm("Delete", "Topics", FormMethod.Post))
                    {
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="id" value="@item.RowKey" />
                        <button type="submit" class="delete-button" onclick="return confirm('Are you sure you want to delete this topic?');">Delete</button>
                    }
                }
            </td>
            <td>
                @if (!string.IsNullOrEmpty(userName))
                {
                    @Html.ActionLink("Comment", "Add", "Comment", new { id = item.RowKey }, null)
                }
            </td>

            <td>
                @Html.Partial("_Comment", _repository.RetrieveAllComments().Where(c => c.TopicId == item.RowKey))
            </td>
        </tr>
    }
</table>